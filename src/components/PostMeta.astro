---
import { Icon } from "astro-icon/components";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import { formatDateToYYYYMMDD } from "../utils/date-utils";
import { getCategoryUrl, getTagUrl } from "../utils/url-utils";

interface Props {
	class: string;
	published: Date;
	updated?: Date;
	tags: string[];
	category: string | null;
	hideTagsForMobile?: boolean;
	hideUpdateDate?: boolean;
}
const {
	published,
	updated,
	tags,
	category,
	hideTagsForMobile = false,
	hideUpdateDate = false,
} = Astro.props;
const className = Astro.props.class;

// Generate consistent color for each tag
const getTagVariant = (
	tagName: string,
): "default" | "primary" | "secondary" | "success" | "warning" | "error" => {
	const variants: (
		| "primary"
		| "secondary"
		| "success"
		| "warning"
		| "error"
	)[] = ["primary", "secondary", "success", "warning", "error"];
	let hash = 0;
	for (let i = 0; i < tagName.length; i++) {
		const char = tagName.charCodeAt(i);
		hash = (hash << 5) - hash + char;
		hash = hash & hash;
	}
	return variants[Math.abs(hash) % variants.length];
};

// Prepare tag data with variants
const tagData = tags
	? tags.map((tag) => ({
			name: tag.trim(),
			variant: getTagVariant(tag.trim()),
			url: getTagUrl(tag),
		}))
	: [];
---

<div class:list={["flex flex-wrap text-neutral-500 dark:text-neutral-400 items-center gap-4 gap-x-4 gap-y-2", className]}>
    <!-- publish date -->
    <div class="flex items-center">
        <div class="meta-icon"
        >
            <Icon name="material-symbols:calendar-today-outline-rounded" class="text-xl"></Icon>
        </div>
        <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(published)}</span>
    </div>

    <!-- update date -->
    {!hideUpdateDate && updated && updated.getTime() !== published.getTime() && (
        <div class="flex items-center">
            <div class="meta-icon"
            >
                <Icon name="material-symbols:edit-calendar-outline-rounded" class="text-xl"></Icon>
            </div>
            <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(updated)}</span>
        </div>
    )}

    <!-- categories -->
    <div class="flex items-center">
        <div class="meta-icon"
        >
            <Icon name="material-symbols:book-2-outline-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            <a href={getCategoryUrl(category)} aria-label={`View all posts in the ${category} category`}
               class="link-lg transition text-50 text-sm font-medium
                            hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                {category || i18n(I18nKey.uncategorized)}
            </a>
        </div>
    </div>

    <!-- tags -->
    <div class:list={["items-center", {"flex": !hideTagsForMobile, "hidden md:flex": hideTagsForMobile}]}>
        <div class="meta-icon"
        >
            <Icon name="material-symbols:tag-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-wrap items-center gap-1.5 p-1">
            {tagData && tagData.length > 0 && tagData.map((tagInfo) => (
                <a href={tagInfo.url} 
                   aria-label={`View all posts with the ${tagInfo.name} tag`}
                   class={`notion-tag notion-tag-${tagInfo.variant}`}
                   style="height: 1.5rem; font-size: 0.75rem; padding: 0.25rem 0.625rem; border-radius: 9999px; display: inline-flex; align-items: center; font-weight: 500; transition: all 0.2s ease-in-out; text-decoration: none;">
                    <span style="line-height: 1;">{tagInfo.name}</span>
                </a>
            ))}
            {!(tagData && tagData.length > 0) && <div class="transition text-50 text-sm font-medium">{i18n(I18nKey.noTags)}</div>}
        </div>
    </div>
</div>